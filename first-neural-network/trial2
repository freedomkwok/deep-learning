import numpy as np

def sigmoid(x):
    """
    Calculate sigmoid
    """
    return 1 / (1 + np.exp(-x))

learnrate = 0.5
weights_input_hidden = np.array([[0.1, -0.2],
                       [0.4, 0.5],
                       [-0.3, 0.2]])
weights_hidden_output = np.array([[0.3],
                       [-0.1]])

x = np.array([[0.5, -0.2, 0.1]])
del_w_input_hidden = np.zeros(weights_input_hidden.shape)
del_w_hidden_output = np.zeros(weights_hidden_output.shape)

hidden_input = np.dot(x, weights_input_hidden)
hidden_output = sigmoid(hidden_input)

output = np.dot(hidden_output, weights_hidden_output)

error = np.array([[0.4]]) - output #1x1
output_error_term = error * output * (1 - output) #1x1

hidden_error = np.dot(weights_hidden_output, output_error_term)  #2x1
hidden_error_term = hidden_error * (hidden_output * (1 - hidden_output)) #2x1

del_w_input_hidden += (hidden_error_term*x).T   #3x2
del_w_hidden_output += hidden_output.T * output_error_term  #2x1

weights_input_hidden += learnrate * del_w_input_hidden / 1
weights_hidden_output += learnrate * del_w_hidden_output / 1

print(weights_input_hidden)
print(weights_hidden_output)